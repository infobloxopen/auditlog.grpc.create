{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "audit.logging",
    "version": "1.0"
  },
  "basePath": "/api/auditlog/v1/",
  "paths": {
    "/logs": {
      "get": {
        "description": "Use this method to retrieve list of Audit logging objects.",
        "tags": [
          "AuditLogging"
        ],
        "summary": "List Audit logs.",
        "operationId": "AuditLoggingListAuditLogs",
        "parameters": [
          {
            "type": "string",
            "description": "\n\nA collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.\n\nLiteral values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'. The following operators are commonly used in filter expressions:\n\n|  Op   |  Description               | \n|  --   |  -----------               | \n|  ==   |  Equal                     | \n|  !=   |  Not Equal                 | \n|  \u003e    |  Greater Than              | \n|   \u003e=  |  Greater Than or Equal To  | \n|  \u003c    |  Less Than                 | \n|  \u003c=   |  Less Than or Equal To     | \n|  and  |  Logical AND               | \n|  ~    |  Matches Regex             | \n|  !~   |  Does Not Match Regex      | \n|  or   |  Logical OR                | \n|  not  |  Logical NOT               | \n|  ()   |  Groupping Operators       |\n\n\t\t\t\t\t\t",
            "name": "_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "\n\nA collection of response resources can be sorted by their JSON tags. For a 'flat' resource, the tag name is straightforward. If sorting is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, its value is assumed to be null.)\n\nSpecify this parameter as a comma-separated list of JSON tag names. The sort direction can be specified by a suffix separated by whitespace before the tag name. The suffix 'asc' sorts the data in ascending order. The suffix 'desc' sorts the data in descending order. If no suffix is specified the data is sorted in ascending order.\n\n\t\t\t\t\t\t",
            "name": "_order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "\n\nA collection of response resources can be transformed by specifying a set of JSON tags to be returned. For a “flat” resource, the tag name is straightforward. If field selection is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, the tag does not appear in the output resource.\n\nSpecify this parameter as a comma-separated list of JSON tag names.\n\n\t\t\t\t\t\t",
            "name": "_fields",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "\n\nThe integer index (zero-origin) of the offset into a collection of resources. If omitted or null the value is assumed to be '0'.\n\n\t\t\t\t\t\t\t",
            "name": "_offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "\n\nThe integer number of resources to be returned in the response. The service may impose maximum value. If omitted the service may impose a default value.\n\n\t\t\t\t\t\t\t",
            "name": "_limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "\n\nThe service-defined string used to identify a page of resources. A null value indicates the first page.\n\n\t\t\t\t\t\t\t",
            "name": "_page_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "GET operation response",
            "schema": {
              "$ref": "#/definitions/serviceListResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apiPageInfo": {
      "description": "PageInfo represents both server-driven and client-driven pagination response.\nServer-driven pagination is a model in which the server returns some\namount of data along with an token indicating there is more data\nand where subsequent queries can get the next page of data.\nClient-driven pagination is a model in which rows are addressable by\noffset and page size (limit).",
      "type": "object",
      "properties": {
        "offset": {
          "description": "The service may optionally include the offset of the next page of resources.\nA null value indicates no more pages.",
          "type": "integer",
          "format": "int32"
        },
        "page_token": {
          "description": "The service response should contain a string to indicate\nthe next page of resources.\nA null value indicates no more pages.",
          "type": "string"
        },
        "size": {
          "description": "The service may optionally include the total number of resources being paged.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "serviceAuditLogRes": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "client_ip": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "event_metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "event_version": {
          "type": "string"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_method": {
          "type": "string"
        },
        "http_req_body": {
          "type": "string"
        },
        "http_resp_body": {
          "type": "string"
        },
        "http_url": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "message": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "resource_desc": {
          "type": "string"
        },
        "resource_id": {
          "type": "string"
        },
        "resource_type": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "session_type": {
          "type": "string"
        },
        "subject_groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject_type": {
          "$ref": "#/definitions/serviceSubjectType"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "serviceListResponse": {
      "type": "object",
      "properties": {
        "page": {
          "$ref": "#/definitions/apiPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceAuditLogRes"
          }
        }
      }
    },
    "serviceSubjectType": {
      "type": "string",
      "default": "Default",
      "enum": [
        "Default",
        "User",
        "Service",
        "Device"
      ]
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}